/*
    json2.js
    2012-10-08

    Public Domain.

    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.

    See http://www.JSON.org/js.html


    This code should be minified before deployment.
    See http://javascript.crockford.com/jsmin.html

    USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO
    NOT CONTROL.


    This file creates a global JSON object containing two methods: stringify
    and parse.

        JSON.stringify(value, replacer, space)
            value       any JavaScript value, usually an object or array.

            replacer    an optional parameter that determines how object
                        values are stringified for objects. It can be a
                        function or an array of strings.

            space       an optional parameter that specifies the indentation
                        of nested structures. If it is omitted, the text will
                        be packed without extra whitespace. If it is a number,
                        it will specify the number of spaces to indent at each
                        level. If it is a string (such as '\t' or '&nbsp;'),
                        it contains the characters used to indent at each level.

            This method produces a JSON text from a JavaScript value.

            When an object value is found, if the object contains a toJSON
            method, its toJSON method will be called and the result will be
            stringified. A toJSON method does not serialize: it returns the
            value represented by the name/value pair that should be serialized,
            or undefined if nothing should be serialized. The toJSON method
            will be passed the key associated with the value, and this will be
            bound to the value

            For example, this would serialize Dates as ISO strings.

                Date.prototype.toJSON = function (key) {
                    function f(n) {
                        // Format integers to have at least two digits.
                        return n < 10 ? '0' + n : n;
                    }

                    return this.getUTCFullYear()   + '-' +
                         f(this.getUTCMonth() + 1) + '-' +
                         f(this.getUTCDate())      + 'T' +
                         f(this.getUTCHours())     + ':' +
                         f(this.getUTCMinutes())   + ':' +
                         f(this.getUTCSeconds())   + 'Z';
                };

            You can provide an optional replacer method. It will be passed the
            key and value of each member, with this bound to the containing
            object. The value that is returned from your method will be
            serialized. If your method returns undefined, then the member will
            be excluded from the serialization.

            If the replacer parameter is an array of strings, then it will be
            used to select the members to be serialized. It filters the results
            such that only members with keys listed in the replacer array are
            stringified.

            Values that do not have JSON representations, such as undefined or
            functions, will not be serialized. Such values in objects will be
            dropped; in arrays they will be replaced with null. You can use
            a replacer function to replace those with JSON values.
            JSON.stringify(undefined) returns undefined.

            The optional space parameter produces a stringification of the
            value that is filled with line breaks and indentation to make it
            easier to read.

            If the space parameter is a non-empty string, then that string will
            be used for indentation. If the space parameter is a number, then
            the indentation will be that many spaces.

            Example:

            text = JSON.stringify(['e', {pluribus: 'unum'}]);
            // text is '["e",{"pluribus":"unum"}]'


            text = JSON.stringify(['e', {pluribus: 'unum'}], null, '\t');
            // text is '[\n\t"e",\n\t{\n\t\t"pluribus": "unum"\n\t}\n]'

            text = JSON.stringify([new Date()], function (key, value) {
                return this[key] instanceof Date ?
                    'Date(' + this[key] + ')' : value;
            });
            // text is '["Date(---current time---)"]'


        JSON.parse(text, reviver)
            This method parses a JSON text to produce an object or array.
            It can throw a SyntaxError exception.

            The optional reviver parameter is a function that can filter and
            transform the results. It receives each of the keys and values,
            and its return value is used instead of the original value.
            If it returns what it received, then the structure is not modified.
            If it returns undefined then the member is deleted.

            Example:

            // Parse the text. Values that look like ISO date strings will
            // be converted to Date objects.

            myData = JSON.parse(text, function (key, value) {
                var a;
                if (typeof value === 'string') {
                    a =
/^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
                    if (a) {
                        return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],
                            +a[5], +a[6]));
                    }
                }
                return value;
            });

            myData = JSON.parse('["Date(09/09/2001)"]', function (key, value) {
                var d;
                if (typeof value === 'string' &&
                        value.slice(0, 5) === 'Date(' &&
                        value.slice(-1) === ')') {
                    d = new Date(value.slice(5, -1));
                    if (d) {
                        return d;
                    }
                }
                return value;
            });


    This is a reference implementation. You are free to copy, modify, or
    redistribute.
*/

/*jslint evil: true, regexp: true */

/*members "", "\b", "\t", "\n", "\f", "\r", "\"", JSON, "\\", apply,
    call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,
    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,
    lastIndex, length, parse, prototype, push, replace, slice, stringify,
    test, toJSON, toString, valueOf
*/


// Create a JSON object only if one does not already exist. We create the
// methods in a closure to avoid creating global variables.

if (typeof JSON !== 'object') {
    JSON = {};
}

(function () {
    'use strict';

    function f(n) {
        // Format integers to have at least two digits.
        return n < 10 ? '0' + n : n;
    }

    if (typeof Date.prototype.toJSON !== 'function') {

        Date.prototype.toJSON = function (key) {

            return isFinite(this.valueOf())
                ? this.getUTCFullYear()     + '-' +
                    f(this.getUTCMonth() + 1) + '-' +
                    f(this.getUTCDate())      + 'T' +
                    f(this.getUTCHours())     + ':' +
                    f(this.getUTCMinutes())   + ':' +
                    f(this.getUTCSeconds())   + 'Z'
                : null;
        };

        String.prototype.toJSON      =
            Number.prototype.toJSON  =
            Boolean.prototype.toJSON = function (key) {
                return this.valueOf();
            };
    }

    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        gap,
        indent,
        meta = {    // table of character substitutions
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '"' : '\\"',
            '\\': '\\\\'
        },
        rep;


    function quote(string) {

// If the string contains no control characters, no quote characters, and no
// backslash characters, then we can safely slap some quotes around it.
// Otherwise we must also replace the offending characters with safe escape
// sequences.

        escapable.lastIndex = 0;
        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
            var c = meta[a];
            return typeof c === 'string'
                ? c
                : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
        }) + '"' : '"' + string + '"';
    }


    function str(key, holder) {

// Produce a string from holder[key].

        var i,          // The loop counter.
            k,          // The member key.
            v,          // The member value.
            length,
            mind = gap,
            partial,
            value = holder[key];

// If the value has a toJSON method, call it to obtain a replacement value.

        if (value && typeof value === 'object' &&
                typeof value.toJSON === 'function') {
            value = value.toJSON(key);
        }

// If we were called with a replacer function, then call the replacer to
// obtain a replacement value.

        if (typeof rep === 'function') {
            value = rep.call(holder, key, value);
        }

// What happens next depends on the value's type.

        switch (typeof value) {
        case 'string':
            return quote(value);

        case 'number':

// JSON numbers must be finite. Encode non-finite numbers as null.

            return isFinite(value) ? String(value) : 'null';

        case 'boolean':
        case 'null':

// If the value is a boolean or null, convert it to a string. Note:
// typeof null does not produce 'null'. The case is included here in
// the remote chance that this gets fixed someday.

            return String(value);

// If the type is 'object', we might be dealing with an object or an array or
// null.

        case 'object':

// Due to a specification blunder in ECMAScript, typeof null is 'object',
// so watch out for that case.

            if (!value) {
                return 'null';
            }

// Make an array to hold the partial results of stringifying this object value.

            gap += indent;
            partial = [];

// Is the value an array?

            if (Object.prototype.toString.apply(value) === '[object Array]') {

// The value is an array. Stringify every element. Use null as a placeholder
// for non-JSON values.

                length = value.length;
                for (i = 0; i < length; i += 1) {
                    partial[i] = str(i, value) || 'null';
                }

// Join all of the elements together, separated with commas, and wrap them in
// brackets.

                v = partial.length === 0
                    ? '[]'
                    : gap
                    ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']'
                    : '[' + partial.join(',') + ']';
                gap = mind;
                return v;
            }

// If the replacer is an array, use it to select the members to be stringified.

            if (rep && typeof rep === 'object') {
                length = rep.length;
                for (i = 0; i < length; i += 1) {
                    if (typeof rep[i] === 'string') {
                        k = rep[i];
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            } else {

// Otherwise, iterate through all of the keys in the object.

                for (k in value) {
                    if (Object.prototype.hasOwnProperty.call(value, k)) {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            }

// Join all of the member texts together, separated with commas,
// and wrap them in braces.

            v = partial.length === 0
                ? '{}'
                : gap
                ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}'
                : '{' + partial.join(',') + '}';
            gap = mind;
            return v;
        }
    }

// If the JSON object does not yet have a stringify method, give it one.

    if (typeof JSON.stringify !== 'function') {
        JSON.stringify = function (value, replacer, space) {

// The stringify method takes a value and an optional replacer, and an optional
// space parameter, and returns a JSON text. The replacer can be a function
// that can replace values, or an array of strings that will select the keys.
// A default replacer method can be provided. Use of the space parameter can
// produce text that is more easily readable.

            var i;
            gap = '';
            indent = '';

// If the space parameter is a number, make an indent string containing that
// many spaces.

            if (typeof space === 'number') {
                for (i = 0; i < space; i += 1) {
                    indent += ' ';
                }

// If the space parameter is a string, it will be used as the indent string.

            } else if (typeof space === 'string') {
                indent = space;
            }

// If there is a replacer, it must be a function or an array.
// Otherwise, throw an error.

            rep = replacer;
            if (replacer && typeof replacer !== 'function' &&
                    (typeof replacer !== 'object' ||
                    typeof replacer.length !== 'number')) {
                throw new Error('JSON.stringify');
            }

// Make a fake root object containing our value under the key of ''.
// Return the result of stringifying the value.

            return str('', {'': value});
        };
    }


// If the JSON object does not yet have a parse method, give it one.

    if (typeof JSON.parse !== 'function') {
        JSON.parse = function (text, reviver) {

// The parse method takes a text and an optional reviver function, and returns
// a JavaScript value if the text is a valid JSON text.

            var j;

            function walk(holder, key) {

// The walk method is used to recursively walk the resulting structure so
// that modifications can be made.

                var k, v, value = holder[key];
                if (value && typeof value === 'object') {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v;
                            } else {
                                delete value[k];
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value);
            }


// Parsing happens in four stages. In the first stage, we replace certain
// Unicode characters with escape sequences. JavaScript handles many characters
// incorrectly, either silently deleting them, or treating them as line endings.

            text = String(text);
            cx.lastIndex = 0;
            if (cx.test(text)) {
                text = text.replace(cx, function (a) {
                    return '\\u' +
                        ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
                });
            }

// In the second stage, we run the text against regular expressions that look
// for non-JSON patterns. We are especially concerned with '()' and 'new'
// because they can cause invocation, and '=' because it can cause mutation.
// But just to be safe, we want to reject all unexpected forms.

// We split the second stage into 4 regexp operations in order to work around
// crippling inefficiencies in IE's and Safari's regexp engines. First we
// replace the JSON backslash pairs with '@' (a non-JSON character). Second, we
// replace all simple value tokens with ']' characters. Third, we delete all
// open brackets that follow a colon or comma or that begin the text. Finally,
// we look to see that the remaining characters are only whitespace or ']' or
// ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.

            if (/^[\],:{}\s]*$/
                    .test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')
                        .replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']')
                        .replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

// In the third stage we use the eval function to compile the text into a
// JavaScript structure. The '{' operator is subject to a syntactic ambiguity
// in JavaScript: it can begin a block or an object literal. We wrap the text
// in parens to eliminate the ambiguity.

                j = eval('(' + text + ')');

// In the optional fourth stage, we recursively walk the new structure, passing
// each name/value pair to a reviver function for possible transformation.

                return typeof reviver === 'function'
                    ? walk({'': j}, '')
                    : j;
            }

// If the text is not JSON parseable, then a SyntaxError is thrown.

            throw new SyntaxError('JSON.parse');
        };
    }
}());

;/*
 * ------------------------------------------------------------------------------------------------
 * 1. 插件名称：autoDialog
 * 2. 插件描述：系统默认对话框
 * 3. 版本：1.0
 * 4. 对其他插件的依赖：强制依赖于 jQuery
 * 5. 参数说明：
	options:{
		'title': '', //标题文字
		'show': false, //初始化时是否直接显示dialog,true：显示 | false：隐藏
		'width': 300, //dialog的宽度，单位px
		'className': null, //dialog自定义class样式名称
		'defaultCss': true, //是否载入默认CSS
		'bgClose': false, //是否支持点击背景关闭对话框
		'move': false, //是否支持移动对话框
		'isShowClose': true, //是否显示右上角×
		'content':"", //插入中间的内容
		'closeFun': null //dialog 关闭后的回调事件
	};
	'open' //打开对话框
	'close' //关闭对话框
 * 6. 未尽事宜：
 * 7. 作者：bangyao.chen@51auto.com
 *---------------------------------------------------------------------------------------------------
 */

/*----------------------------------------------------------------
 *  方法主体
 *-----------------------------------------------------------------*/
(function($) {
	$.fn.autoDialog = function(options) {
		'use strict';
		var options = arguments[0];
		var alertCon = arguments[1];
		if (typeof options == 'object') {
			var settings = $.extend(true, {}, {
				'title': '', //标题文字
				'show': false, //初始化时是否直接显示dialog,true：显示 | false：隐藏
				'width': 450, //dialog的宽度，单位px
				'className': null, //dialog自定义class样式名称
				'defaultCss': true, //是否载入默认CSS
				'bgClose': false, //是否支持点击背景关闭对话框
				'move': false, //是否支持移动对话框
				'isShowClose': true, //是否显示右上角×
				'content': "", //插入中间的内容
				'closeFun': null //dialog 关闭后的回调事件
			}, options);
		} else if (typeof options != 'string') {
			throw new Error('Dialog Parameter error : options error !');
			return false;
		}

		//方法集合
		function fun(element, opts) {
			this.opts = opts;
			this._this = $(element);
			this.isIE6 = /MSIE 6.0/.exec(navigator.userAgent);
			//初始化
			this.init();
		};

		//初始加载事件
		fun.prototype = {
			init: function() {
				var root = this;
				var html = '<div class="auto-dialog ' + (root.opts.className || '') + '"  style="display: none;">' 
						+ '		<div class="dialog-container" style="width:' + (root.opts.width || 450) + 'px;">' 
						+ '			<h4 class="dialog-head">' 
						+ '				<span class="dialog-title">' + (root.opts.title || '') + '</span>' 
						+ 				(root.opts.isShowClose ? '<a href="javascript:;" class="dialog-close">×</a>' : '')
						+ '			</h4>' 
						+ '			<div class="dialog-body"></div>' 
						+ '		</div>' 
						+ '		<div class="dialog-bg"></div>' 
						+ '</div>';
				root.myDialog = $(html.replace(/>\s+</g, '><')).appendTo(document.body);
				root.container = $('.dialog-container', root.myDialog).get(0);
				root.bg = $('.dialog-bg', root.myDialog).get(0);
				root.content = $('.dialog-body', root.myDialog).get(0);
				root.closebtn = $('.dialog-close', root.myDialog).get(0);
				root._this.show().appendTo(root.content);
				//插入插入CSS
				// root.insertCssFun();
				//绑定点击事件
				root.attachEventFun();

				root.isIE6 && root.bgResize();
				//是否初始显示Dialog
				root.opts.show && setTimeout(function() {
					root.open();
				}, 500);
			},

			//插入CSS
			insertCssFun: function() {
				//检测已经存在CSS && 判断是否需要插入CSS
				if ($("#autoDialogCss").length && this.opts.defaultCss) return false;
				var _head = $("head");
				var link = document.createElement("link");
				link.id = "autoDialogCss";
				link.rel = "stylesheet";
				link.type = "text/css";
				link.href = "http://cdn01.51autoimg.com/51auto/js/util/51autodialog/css/51autodialog.min.css";
				// link.href = "../css/51autodialog.min.css";
				if(_head.children('link').length){
					_head.children('link:eq(0)').before(link);
				}else{
					_head.append(link);
				}
			},

			//停止事件冒泡
			stopBubble: function(e) {
				//如果提供了事件对象，则这是一个非IE浏览器
				if (e && e.stopPropagation) {
					e.stopPropagation();
				} else {
					//用IE的方式来取消事件冒泡
					window.event.cancelBubble = true;
				}
			},

			//事件绑定
			attachEventFun: function() {
				var root = this;
				//右上角×的事件绑定
				$(root.closebtn).on('click.51autodialog', this, function(e) {
					root.close();
					root.stopBubble(e);
					return false;
				});
				//屏幕改变大小改变弹窗大小
				$(window).resize(function() {
					setTimeout(function() {
						root.boxResize();
					}, 200);
				});
				//点击背景关闭对话框
				root.opts.bgClose && $(root.bg).on('click.51autodialog', this, function(e) {
					root.close();
					root.stopBubble(e);
					return false;
				});

				//移动对话框
				root.opts.move && root.moveBox();
			},

			//IE6 fixed 属性不支持，将背景图片设置为全屏
			bgResize: function() {
				var root = this;
				$(root.bg).css({
					'width': $(document.body).outerWidth(),
					'height': $(document.body).outerHeight()
				});
			},

			// 当弹出框超出屏幕宽度和高度时，设定弹出框距离屏幕边距为20PX
			boxResize: function() {
				var root = this,
					_dialog = $(root.container);
				if (root.myDialog.is(':visible')) {
					root.opts.height = root.opts.height || _dialog.outerHeight();
					var winWidth = $(window).width(),
						winHeight = $(window).height(),
						boxWidth = root.opts.width,
						boxHeight = root.opts.height,
						width = root.setSize(boxWidth, winWidth - 40),
						height = root.setSize(boxHeight, winHeight - 40);
					if (root.opts.move) {
						_dialog.css({
							"left": (boxWidth <= winWidth ? (winWidth - boxWidth - 40) / 2 : 20),
							"top": (boxHeight <= winHeight ? (winHeight - boxHeight - 40) / 2 : 20),
							'margin': 0,
							'width': width,
							'height': height
						});
					} else {
						_dialog.css({
							'margin-left': width / 2 * -1,
							'margin-top': height / 2 * -1,
							'width': width,
							'height': height
						});
					}
				}
			},

			setSize: function(boxSize, winSize) {
				return boxSize > winSize ? winSize : boxSize;
			},

			// 拖拽方法
			moveBox: function(event) {
				var root = this,
					pageX = 0,
					pageY = 0,
					//需要拖动的目标DIV 
					_dialog = $(root.container),
					winWidth = $(window).width(),
					winHeight = $(window).height();
				// 绑定鼠标点下事件
				_dialog.on('mousedown.51autodialog', this, function(event) {

					var d = document;
					var e = event || window.event;
					//鼠标和DIV的相对坐标  
					pageX = (e.pageX || e.clientX) - parseInt(root.container.style.left);
					pageY = (e.pageY || e.clientY) - parseInt(root.container.style.top);
					root.container.style.cursor = 'move';
					// 设置捕获范围
					if (root.container.setCapture) {
						root.container.setCapture();
					} else if (window.captureEvents) {
						window.captureEvents(Event.MOUSEMOVE | Event.MOUSEUP);
					}

					//绑定移动事件
					d.onmousemove = function(event) {
						var e = event || window.event;
						//鼠标在页面的坐标 - 鼠标和DIV的相对坐标 = DIV在页面的坐标 
						var ePageX = e.pageX || e.clientX,
							ePageY = e.pageY || e.clientY;
						setTimeout(function() {
							var boxWidth = root.opts.width,
								boxHeight = root.opts.height,
								//左右偏移值
								x = ePageX - pageX,
								y = ePageY - pageY;
							if (x <= 0 || y <= 0 || x >= winWidth - boxWidth || y >= winHeight - boxHeight) {
								return;
							}
							_dialog.css({
								"left": x,
								"top": y,
								'margin': 0
							});
						}, 75);
					};
					
					//绑定鼠标弹起事件
					d.onmouseup = function(event) {
						// 取消捕获范围 
						if (root.container.releaseCapture)
							root.container.releaseCapture();
						else if (window.captureEvents)
							window.captureEvents(Event.MOUSEMOVE | Event.MOUSEUP);
						root.container.style.cursor = 'auto';
						// 解绑事件
						d.onmousemove = null;
						d.onmouseup = null;
						d.ondragstart = null;
						d.onselectstart = null;
						d.onselect = null;
					};

				});
			},

			// 设置对话框层级
			setZindexFun: function() {
				var root = this;
				var row = $(".auto-dialog:visible").length;
				$(root.container).css({
					'z-index': 10001 + 2 * row
				});
				$(root.bg).css({
					'z-index': 10000 + 2 * row
				});
			},

			//写入内容
			writeHtmlFun: function() {
				var root = this;
				root.opts.content != "" && root._this.html(root.opts.content);
			},

			//显示对话框
			open: function() {
				var root = this;
				root.writeHtmlFun();
				if (root.myDialog.is(':hidden')) {
					root.setZindexFun();
					root.myDialog.show();
					root.boxResize();
				}
			},

			// 关闭对话框
			close: function() {
				var root = this;
				if (root.myDialog.is(':visible')) {
					root.myDialog.hide();
					if ($.isFunction(root.opts.closeFun)) {
						root.opts.closeFun(root);
					}
				}
			}
		};

		return this.each(function() {
			var _this = $(this);
			var data = _this.data('dialog');
			if (!data) _this.data('dialog', (data = new fun(this, settings)));
			if (typeof options == 'string' && /^(open|close)$/.test(options)) {
				if(options == "open" &&  alertCon && alertCon != "") data.opts.content = alertCon;
				data[options]();
			}
		});
	};

})(jQuery);
;/*
 * jQuery Nivo Slider v3.2
 * http://nivo.dev7studios.com
 *
 * Copyright 2012, Dev7studios
 * Free to use and abuse under the MIT license.
 * http://www.opensource.org/licenses/mit-license.php
 */

(function($) {
    var NivoSlider = function(element, options){
        // Defaults are below
        var settings = $.extend({}, $.fn.nivoSlider.defaults, options);

        // Useful variables. Play carefully.
        var vars = {
            currentSlide: 0,
            currentImage: '',
            totalSlides: 0,
            running: false,
            paused: false,
            stop: false,
            controlNavEl: false
        };

        // Get this slider
        var slider = $(element);
        slider.data('nivo:vars', vars).addClass('nivoSlider');

        // Find our slider children
        var kids = slider.children();
        kids.each(function() {
            var child = $(this);
            var link = '';
            if(!child.is('img')){
                if(child.is('a')){
                    child.addClass('nivo-imageLink');
                    link = child;
                }
                child = child.find('img:first');
            }
            // Get img width & height
            var childWidth = (childWidth === 0) ? child.attr('width') : child.width(),
                childHeight = (childHeight === 0) ? child.attr('height') : child.height();

            if(link !== ''){
                link.css('display','none');
            }
            child.css('display','none');
            vars.totalSlides++;
        });
         
        // If randomStart
        if(settings.randomStart){
            settings.startSlide = Math.floor(Math.random() * vars.totalSlides);
        }
        
        // Set startSlide
        if(settings.startSlide > 0){
            if(settings.startSlide >= vars.totalSlides) { settings.startSlide = vars.totalSlides - 1; }
            vars.currentSlide = settings.startSlide;
        }
        
        // Get initial image
        if($(kids[vars.currentSlide]).is('img')){
            vars.currentImage = $(kids[vars.currentSlide]);
        } else {
            vars.currentImage = $(kids[vars.currentSlide]).find('img:first');
        }
        
        // Show initial link
        if($(kids[vars.currentSlide]).is('a')){
            $(kids[vars.currentSlide]).css('display','block');
        }
        
        // Set first background
        var sliderImg = $('<img/>').addClass('nivo-main-image');
        sliderImg.attr('src', vars.currentImage.attr('src')).show();
        slider.append(sliderImg);

        // Detect Window Resize
        $(window).resize(function() {
            slider.children('img').width(slider.width());
            sliderImg.attr('src', vars.currentImage.attr('src'));
            sliderImg.stop().height('auto');
            $('.nivo-slice').remove();
            $('.nivo-box').remove();
        });

        //Create caption
        slider.append($('<div class="nivo-caption"></div>'));
        
        // Process caption function
        var processCaption = function(settings){
            var nivoCaption = $('.nivo-caption', slider);
            if(vars.currentImage.attr('title') != '' && vars.currentImage.attr('title') != undefined){
                var title = vars.currentImage.attr('title');
                if(title.substr(0,1) == '#') title = $(title).html();   

                if(nivoCaption.css('display') == 'block'){
                    setTimeout(function(){
                        nivoCaption.html(title);
                    }, settings.animSpeed);
                } else {
                    nivoCaption.html(title);
                    nivoCaption.stop().fadeIn(settings.animSpeed);
                }
            } else {
                nivoCaption.stop().fadeOut(settings.animSpeed);
            }
        }
        
        //Process initial  caption
        processCaption(settings);
        
        // In the words of Super Mario "let's a go!"
        var timer = 0;
        if(!settings.manualAdvance && kids.length > 1){
            timer = setInterval(function(){ nivoRun(slider, kids, settings, false); }, settings.pauseTime);
        }
        
        // Add Direction nav
        if(settings.directionNav){
            slider.append('<div class="nivo-directionNav"><a class="nivo-prevNav">'+ settings.prevText +'</a><a class="nivo-nextNav">'+ settings.nextText +'</a></div>');
            
            $(slider).on('click', 'a.nivo-prevNav', function(){
                if(vars.running) { return false; }
                clearInterval(timer);
                timer = '';
                vars.currentSlide -= 2;
                nivoRun(slider, kids, settings, 'prev');
            });
            
            $(slider).on('click', 'a.nivo-nextNav', function(){
                if(vars.running) { return false; }
                clearInterval(timer);
                timer = '';
                nivoRun(slider, kids, settings, 'next');
            });
        }
        
        // Add Control nav
        if(settings.controlNav){
            vars.controlNavEl = $('<div class="nivo-controlNav"></div>');
            slider.after(vars.controlNavEl);
            for(var i = 0; i < kids.length; i++){
                if(settings.controlNavThumbs){
                    vars.controlNavEl.addClass('nivo-thumbs-enabled');
                    var child = kids.eq(i);
                    if(!child.is('img')){
                        child = child.find('img:first');
                    }
                    if(child.attr('data-thumb')) vars.controlNavEl.append('<a class="nivo-control" rel="'+ i +'"><img src="'+ child.attr('data-thumb') +'" alt="" /></a>');
                } else {
                    vars.controlNavEl.append('<a class="nivo-control" rel="'+ i +'">'+ (i + 1) +'</a>');
                }
            }

            //Set initial active link
            $('a:eq('+ vars.currentSlide +')', vars.controlNavEl).addClass('active');
            
            $('a', vars.controlNavEl).bind('click', function(){
                if(vars.running) return false;
                if($(this).hasClass('active')) return false;
                clearInterval(timer);
                timer = '';
                sliderImg.attr('src', vars.currentImage.attr('src'));
                vars.currentSlide = $(this).attr('rel') - 1;
                nivoRun(slider, kids, settings, 'control');
            });
        }
        
        //For pauseOnHover setting
        if(settings.pauseOnHover){
            slider.hover(function(){
                vars.paused = true;
                clearInterval(timer);
                timer = '';
            }, function(){
                vars.paused = false;
                // Restart the timer
                if(timer === '' && !settings.manualAdvance){
                    timer = setInterval(function(){ nivoRun(slider, kids, settings, false); }, settings.pauseTime);
                }
            });
        }
        
        // Event when Animation finishes
        slider.bind('nivo:animFinished', function(){
            sliderImg.attr('src', vars.currentImage.attr('src'));
            vars.running = false; 
            // Hide child links
            $(kids).each(function(){
                if($(this).is('a')){
                   $(this).css('display','none');
                }
            });
            // Show current link
            if($(kids[vars.currentSlide]).is('a')){
                $(kids[vars.currentSlide]).css('display','block');
            }
            // Restart the timer
            if(timer === '' && !vars.paused && !settings.manualAdvance){
                timer = setInterval(function(){ nivoRun(slider, kids, settings, false); }, settings.pauseTime);
            }
            // Trigger the afterChange callback
            settings.afterChange.call(this);
        }); 
        
        // Add slices for slice animations
        var createSlices = function(slider, settings, vars) {
        	if($(vars.currentImage).parent().is('a')) $(vars.currentImage).parent().css('display','block');
            $('img[src="'+ vars.currentImage.attr('src') +'"]', slider).not('.nivo-main-image,.nivo-control img').width(slider.width()).css('visibility', 'hidden').show();
            var sliceHeight = ($('img[src="'+ vars.currentImage.attr('src') +'"]', slider).not('.nivo-main-image,.nivo-control img').parent().is('a')) ? $('img[src="'+ vars.currentImage.attr('src') +'"]', slider).not('.nivo-main-image,.nivo-control img').parent().height() : $('img[src="'+ vars.currentImage.attr('src') +'"]', slider).not('.nivo-main-image,.nivo-control img').height();

            for(var i = 0; i < settings.slices; i++){
                var sliceWidth = Math.round(slider.width()/settings.slices);
                
                if(i === settings.slices-1){
                    slider.append(
                        $('<div class="nivo-slice" name="'+i+'"><img src="'+ vars.currentImage.attr('src') +'" style="position:absolute; width:'+ slider.width() +'px; height:auto; display:block !important; top:0; left:-'+ ((sliceWidth + (i * sliceWidth)) - sliceWidth) +'px;" /></div>').css({ 
                            left:(sliceWidth*i)+'px', 
                            width:(slider.width()-(sliceWidth*i))+'px',
                            height:sliceHeight+'px', 
                            opacity:'0',
                            overflow:'hidden'
                        })
                    );
                } else {
                    slider.append(
                        $('<div class="nivo-slice" name="'+i+'"><img src="'+ vars.currentImage.attr('src') +'" style="position:absolute; width:'+ slider.width() +'px; height:auto; display:block !important; top:0; left:-'+ ((sliceWidth + (i * sliceWidth)) - sliceWidth) +'px;" /></div>').css({ 
                            left:(sliceWidth*i)+'px', 
                            width:sliceWidth+'px',
                            height:sliceHeight+'px',
                            opacity:'0',
                            overflow:'hidden'
                        })
                    );
                }
            }
            
            $('.nivo-slice', slider).height(sliceHeight);
            sliderImg.stop().animate({
                height: $(vars.currentImage).height()
            }, settings.animSpeed);
        };
        
        // Add boxes for box animations
        var createBoxes = function(slider, settings, vars){
        	if($(vars.currentImage).parent().is('a')) $(vars.currentImage).parent().css('display','block');
            $('img[src="'+ vars.currentImage.attr('src') +'"]', slider).not('.nivo-main-image,.nivo-control img').width(slider.width()).css('visibility', 'hidden').show();
            var boxWidth = Math.round(slider.width()/settings.boxCols),
                boxHeight = Math.round($('img[src="'+ vars.currentImage.attr('src') +'"]', slider).not('.nivo-main-image,.nivo-control img').height() / settings.boxRows);
            
                        
            for(var rows = 0; rows < settings.boxRows; rows++){
                for(var cols = 0; cols < settings.boxCols; cols++){
                    if(cols === settings.boxCols-1){
                        slider.append(
                            $('<div class="nivo-box" name="'+ cols +'" rel="'+ rows +'"><img src="'+ vars.currentImage.attr('src') +'" style="position:absolute; width:'+ slider.width() +'px; height:auto; display:block; top:-'+ (boxHeight*rows) +'px; left:-'+ (boxWidth*cols) +'px;" /></div>').css({ 
                                opacity:0,
                                left:(boxWidth*cols)+'px', 
                                top:(boxHeight*rows)+'px',
                                width:(slider.width()-(boxWidth*cols))+'px'
                                
                            })
                        );
                        $('.nivo-box[name="'+ cols +'"]', slider).height($('.nivo-box[name="'+ cols +'"] img', slider).height()+'px');
                    } else {
                        slider.append(
                            $('<div class="nivo-box" name="'+ cols +'" rel="'+ rows +'"><img src="'+ vars.currentImage.attr('src') +'" style="position:absolute; width:'+ slider.width() +'px; height:auto; display:block; top:-'+ (boxHeight*rows) +'px; left:-'+ (boxWidth*cols) +'px;" /></div>').css({ 
                                opacity:0,
                                left:(boxWidth*cols)+'px', 
                                top:(boxHeight*rows)+'px',
                                width:boxWidth+'px'
                            })
                        );
                        $('.nivo-box[name="'+ cols +'"]', slider).height($('.nivo-box[name="'+ cols +'"] img', slider).height()+'px');
                    }
                }
            }
            
            sliderImg.stop().animate({
                height: $(vars.currentImage).height()
            }, settings.animSpeed);
        };

        // Private run method
        var nivoRun = function(slider, kids, settings, nudge){          
            // Get our vars
            var vars = slider.data('nivo:vars');
            
            // Trigger the lastSlide callback
            if(vars && (vars.currentSlide === vars.totalSlides - 1)){ 
                settings.lastSlide.call(this);
            }
            
            // Stop
            if((!vars || vars.stop) && !nudge) { return false; }
            
            // Trigger the beforeChange callback
            settings.beforeChange.call(this);

            // Set current background before change
            if(!nudge){
                sliderImg.attr('src', vars.currentImage.attr('src'));
            } else {
                if(nudge === 'prev'){
                    sliderImg.attr('src', vars.currentImage.attr('src'));
                }
                if(nudge === 'next'){
                    sliderImg.attr('src', vars.currentImage.attr('src'));
                }
            }
            
            vars.currentSlide++;
            // Trigger the slideshowEnd callback
            if(vars.currentSlide === vars.totalSlides){ 
                vars.currentSlide = 0;
                settings.slideshowEnd.call(this);
            }
            if(vars.currentSlide < 0) { vars.currentSlide = (vars.totalSlides - 1); }
            // Set vars.currentImage
            if($(kids[vars.currentSlide]).is('img')){
                vars.currentImage = $(kids[vars.currentSlide]);
            } else {
                vars.currentImage = $(kids[vars.currentSlide]).find('img:first');
            }
            
            // Set active links
            if(settings.controlNav){
                $('a', vars.controlNavEl).removeClass('active');
                $('a:eq('+ vars.currentSlide +')', vars.controlNavEl).addClass('active');
            }
            
            // Process caption
            processCaption(settings);            
            
            // Remove any slices from last transition
            $('.nivo-slice', slider).remove();
            
            // Remove any boxes from last transition
            $('.nivo-box', slider).remove();
            
            var currentEffect = settings.effect,
                anims = '';
                
            // Generate random effect
            if(settings.effect === 'random'){
                anims = new Array('sliceDownRight','sliceDownLeft','sliceUpRight','sliceUpLeft','sliceUpDown','sliceUpDownLeft','fold','fade',
                'boxRandom','boxRain','boxRainReverse','boxRainGrow','boxRainGrowReverse');
                currentEffect = anims[Math.floor(Math.random()*(anims.length + 1))];
                if(currentEffect === undefined) { currentEffect = 'fade'; }
            }
            
            // Run random effect from specified set (eg: effect:'fold,fade')
            if(settings.effect.indexOf(',') !== -1){
                anims = settings.effect.split(',');
                currentEffect = anims[Math.floor(Math.random()*(anims.length))];
                if(currentEffect === undefined) { currentEffect = 'fade'; }
            }
            
            // Custom transition as defined by "data-transition" attribute
            if(vars.currentImage.attr('data-transition')){
                currentEffect = vars.currentImage.attr('data-transition');
            }
        
            // Run effects
            vars.running = true;
            var timeBuff = 0,
                i = 0,
                slices = '',
                firstSlice = '',
                totalBoxes = '',
                boxes = '';
            
            if(currentEffect === 'sliceDown' || currentEffect === 'sliceDownRight' || currentEffect === 'sliceDownLeft'){
                createSlices(slider, settings, vars);
                timeBuff = 0;
                i = 0;
                slices = $('.nivo-slice', slider);
                if(currentEffect === 'sliceDownLeft') { slices = $('.nivo-slice', slider)._reverse(); }
                
                slices.each(function(){
                    var slice = $(this);
                    slice.css({ 'top': '0px' });
                    if(i === settings.slices-1){
                        setTimeout(function(){
                            slice.animate({opacity:'1.0' }, settings.animSpeed, '', function(){ slider.trigger('nivo:animFinished'); });
                        }, (100 + timeBuff));
                    } else {
                        setTimeout(function(){
                            slice.animate({opacity:'1.0' }, settings.animSpeed);
                        }, (100 + timeBuff));
                    }
                    timeBuff += 50;
                    i++;
                });
            } else if(currentEffect === 'sliceUp' || currentEffect === 'sliceUpRight' || currentEffect === 'sliceUpLeft'){
                createSlices(slider, settings, vars);
                timeBuff = 0;
                i = 0;
                slices = $('.nivo-slice', slider);
                if(currentEffect === 'sliceUpLeft') { slices = $('.nivo-slice', slider)._reverse(); }
                
                slices.each(function(){
                    var slice = $(this);
                    slice.css({ 'bottom': '0px' });
                    if(i === settings.slices-1){
                        setTimeout(function(){
                            slice.animate({opacity:'1.0' }, settings.animSpeed, '', function(){ slider.trigger('nivo:animFinished'); });
                        }, (100 + timeBuff));
                    } else {
                        setTimeout(function(){
                            slice.animate({opacity:'1.0' }, settings.animSpeed);
                        }, (100 + timeBuff));
                    }
                    timeBuff += 50;
                    i++;
                });
            } else if(currentEffect === 'sliceUpDown' || currentEffect === 'sliceUpDownRight' || currentEffect === 'sliceUpDownLeft'){
                createSlices(slider, settings, vars);
                timeBuff = 0;
                i = 0;
                var v = 0;
                slices = $('.nivo-slice', slider);
                if(currentEffect === 'sliceUpDownLeft') { slices = $('.nivo-slice', slider)._reverse(); }
                
                slices.each(function(){
                    var slice = $(this);
                    if(i === 0){
                        slice.css('top','0px');
                        i++;
                    } else {
                        slice.css('bottom','0px');
                        i = 0;
                    }
                    
                    if(v === settings.slices-1){
                        setTimeout(function(){
                            slice.animate({opacity:'1.0' }, settings.animSpeed, '', function(){ slider.trigger('nivo:animFinished'); });
                        }, (100 + timeBuff));
                    } else {
                        setTimeout(function(){
                            slice.animate({opacity:'1.0' }, settings.animSpeed);
                        }, (100 + timeBuff));
                    }
                    timeBuff += 50;
                    v++;
                });
            } else if(currentEffect === 'fold'){
                createSlices(slider, settings, vars);
                timeBuff = 0;
                i = 0;
                
                $('.nivo-slice', slider).each(function(){
                    var slice = $(this);
                    var origWidth = slice.width();
                    slice.css({ top:'0px', width:'0px' });
                    if(i === settings.slices-1){
                        setTimeout(function(){
                            slice.animate({ width:origWidth, opacity:'1.0' }, settings.animSpeed, '', function(){ slider.trigger('nivo:animFinished'); });
                        }, (100 + timeBuff));
                    } else {
                        setTimeout(function(){
                            slice.animate({ width:origWidth, opacity:'1.0' }, settings.animSpeed);
                        }, (100 + timeBuff));
                    }
                    timeBuff += 50;
                    i++;
                });
            } else if(currentEffect === 'fade'){
                createSlices(slider, settings, vars);
                
                firstSlice = $('.nivo-slice:first', slider);
                firstSlice.css({
                    'width': slider.width() + 'px'
                });
    
                firstSlice.animate({ opacity:'1.0' }, (settings.animSpeed*2), '', function(){ slider.trigger('nivo:animFinished'); });
            } else if(currentEffect === 'slideInRight'){
                createSlices(slider, settings, vars);
                
                firstSlice = $('.nivo-slice:first', slider);
                firstSlice.css({
                    'width': '0px',
                    'opacity': '1'
                });

                firstSlice.animate({ width: slider.width() + 'px' }, (settings.animSpeed*2), '', function(){ slider.trigger('nivo:animFinished'); });
            } else if(currentEffect === 'slideInLeft'){
                createSlices(slider, settings, vars);
                
                firstSlice = $('.nivo-slice:first', slider);
                firstSlice.css({
                    'width': '0px',
                    'opacity': '1',
                    'left': '',
                    'right': '0px'
                });

                firstSlice.animate({ width: slider.width() + 'px' }, (settings.animSpeed*2), '', function(){ 
                    // Reset positioning
                    firstSlice.css({
                        'left': '0px',
                        'right': ''
                    });
                    slider.trigger('nivo:animFinished'); 
                });
            } else if(currentEffect === 'boxRandom'){
                createBoxes(slider, settings, vars);
                
                totalBoxes = settings.boxCols * settings.boxRows;
                i = 0;
                timeBuff = 0;

                boxes = shuffle($('.nivo-box', slider));
                boxes.each(function(){
                    var box = $(this);
                    if(i === totalBoxes-1){
                        setTimeout(function(){
                            box.animate({ opacity:'1' }, settings.animSpeed, '', function(){ slider.trigger('nivo:animFinished'); });
                        }, (100 + timeBuff));
                    } else {
                        setTimeout(function(){
                            box.animate({ opacity:'1' }, settings.animSpeed);
                        }, (100 + timeBuff));
                    }
                    timeBuff += 20;
                    i++;
                });
            } else if(currentEffect === 'boxRain' || currentEffect === 'boxRainReverse' || currentEffect === 'boxRainGrow' || currentEffect === 'boxRainGrowReverse'){
                createBoxes(slider, settings, vars);
                
                totalBoxes = settings.boxCols * settings.boxRows;
                i = 0;
                timeBuff = 0;
                
                // Split boxes into 2D array
                var rowIndex = 0;
                var colIndex = 0;
                var box2Darr = [];
                box2Darr[rowIndex] = [];
                boxes = $('.nivo-box', slider);
                if(currentEffect === 'boxRainReverse' || currentEffect === 'boxRainGrowReverse'){
                    boxes = $('.nivo-box', slider)._reverse();
                }
                boxes.each(function(){
                    box2Darr[rowIndex][colIndex] = $(this);
                    colIndex++;
                    if(colIndex === settings.boxCols){
                        rowIndex++;
                        colIndex = 0;
                        box2Darr[rowIndex] = [];
                    }
                });
                
                // Run animation
                for(var cols = 0; cols < (settings.boxCols * 2); cols++){
                    var prevCol = cols;
                    for(var rows = 0; rows < settings.boxRows; rows++){
                        if(prevCol >= 0 && prevCol < settings.boxCols){
                            /* Due to some weird JS bug with loop vars 
                            being used in setTimeout, this is wrapped
                            with an anonymous function call */
                            (function(row, col, time, i, totalBoxes) {
                                var box = $(box2Darr[row][col]);
                                var w = box.width();
                                var h = box.height();
                                if(currentEffect === 'boxRainGrow' || currentEffect === 'boxRainGrowReverse'){
                                    box.width(0).height(0);
                                }
                                if(i === totalBoxes-1){
                                    setTimeout(function(){
                                        box.animate({ opacity:'1', width:w, height:h }, settings.animSpeed/1.3, '', function(){ slider.trigger('nivo:animFinished'); });
                                    }, (100 + time));
                                } else {
                                    setTimeout(function(){
                                        box.animate({ opacity:'1', width:w, height:h }, settings.animSpeed/1.3);
                                    }, (100 + time));
                                }
                            })(rows, prevCol, timeBuff, i, totalBoxes);
                            i++;
                        }
                        prevCol--;
                    }
                    timeBuff += 100;
                }
            }           
        };
        
        // Shuffle an array
        var shuffle = function(arr){
            for(var j, x, i = arr.length; i; j = parseInt(Math.random() * i, 10), x = arr[--i], arr[i] = arr[j], arr[j] = x);
            return arr;
        };
        
        // For debugging
        var trace = function(msg){
            if(this.console && typeof console.log !== 'undefined') { console.log(msg); }
        };
        
        // Start / Stop
        this.stop = function(){
            if(!$(element).data('nivo:vars').stop){
                $(element).data('nivo:vars').stop = true;
                trace('Stop Slider');
            }
        };
        
        this.start = function(){
            if($(element).data('nivo:vars').stop){
                $(element).data('nivo:vars').stop = false;
                trace('Start Slider');
            }
        };
        
        // Trigger the afterLoad callback
        settings.afterLoad.call(this);
        
        return this;
    };
        
    $.fn.nivoSlider = function(options) {
        return this.each(function(key, value){
            var element = $(this);
            // Return early if this element already has a plugin instance
            if (element.data('nivoslider')) { return element.data('nivoslider'); }
            // Pass options to plugin constructor
            var nivoslider = new NivoSlider(this, options);
            // Store plugin object in this element's data
            element.data('nivoslider', nivoslider);
        });
    };
    
    //Default settings
    $.fn.nivoSlider.defaults = {
        effect: 'random',
        slices: 15,
        boxCols: 8,
        boxRows: 4,
        animSpeed: 500,
        pauseTime: 3000,
        startSlide: 0,
        directionNav: true,
        controlNav: true,
        controlNavThumbs: false,
        pauseOnHover: true,
        manualAdvance: false,
        prevText: 'Prev',
        nextText: 'Next',
        randomStart: false,
        beforeChange: function(){},
        afterChange: function(){},
        slideshowEnd: function(){},
        lastSlide: function(){},
        afterLoad: function(){}
    };

    $.fn._reverse = [].reverse;
    
})(jQuery);
;// JavaScript Document
window.tiyuanFed = window.tiyuanFed || {};

// 首页方法
tiyuanFed.indexInit = function() {

	//首页Banner图片切换JS
	$('.nivoSlider').nivoSlider();
	// 微信客户端复层绑定
	this.weixinFun();
	// 菜单切换事件
	// this.menuFun();

};

// 列表页
tiyuanFed.listInit = function() {

};

// 内页
tiyuanFed.detailInit = function() {
	this.signUpFun();
};

// 登录注册页
tiyuanFed.loginlInit = function(state, msg) {
	// 登录表单验证
	this.formValidationFun($("#loginForm"));
	// 注册表单验证
	this.formValidationFun($("#regsiterForm"));
	// 显示对话框
	if (state && msg) {
		this.tipsDialog('loginDialog', state, msg);
	}
};

// 留言列表
tiyuanFed.msgInit = function() {
	// 发布了留言
	this.msgRelease();
};

// 留言列表
tiyuanFed.voteInit = function() {
	// 注册表单验证
	this.formValidationFun($("#voteSubmitForm"));
};

// 显示对话框
tiyuanFed.tipsDialog = function(id, state, msg) {
	var icon = (state === "ok" ? '<i class="icon icon-ok"></i>' : '<i class="icon icon-error"></i>');
	if ($('#' + id).length) {
		$('#' + id).autoDialog('open', '<div class="my-msg">' + icon + msg + '</div>');
	} else {
		var _dialog = $('<div id="' + id + '" style="display: none;"></div>').appendTo('body');
		_dialog.autoDialog({
			'title': '系统提示',
			'show': true,
			'width': 450,
			'content': '<div class="my-msg">' + icon + msg + '</div>' //插入中间的内容
		});
	}
};

//节约性能
tiyuanFed.throttle = function(fn, delay, mustRunDelay) {
	var timer = null;
	var t_start;
	return function() {
		var context = this,
			args = arguments,
			t_curr = +new Date();
		clearTimeout(timer);
		if (!t_start) {
			t_start = t_curr;
		}
		if (t_curr - t_start >= mustRunDelay) {
			fn.apply(context, args);
			t_start = t_curr;
		} else {
			timer = setTimeout(function() {
				fn.apply(context, args);
			}, delay);
		}
	};
};

//右侧悬浮
tiyuanFed.rightFixedFun = function() {
	var box = $(".r-fixed"),
		goTop = box.children('.goTop'),
		wHeight = $(window).height();
	if (!box.length) {
		return;
	}
	// 初始化侧悬浮
	box.removeClass('hide').children('goTop').addClass('hide');
	$(window).scroll(tiyuanFed.throttle(function(event) {
		if ($(window).scrollTop() < 100) {
			goTop.addClass('hide');
		} else {
			goTop.removeClass('hide');
		}
	}, 200, 400));
	// 返回顶部
	box.on('click', '.goTop', function() {
		$('html,body').animate({
			scrollTop: 0
		}, function() {
			goTop.addClass('hide');
		});
		return false;
	});
	// 公众号出二维码
	if ($(".rWeixin").length) {
		var t = null,
			rWeixin = $(".rWeixin"),
			rbtnW = rWeixin.outerWidth(),
			rbtnH = rWeixin.outerHeight(),
			erwei = $(".erwei"),
			erweiH = erwei.outerHeight(true),
			erweiW = erwei.outerWidth(true),
			wWidth = $(window).width(),
			isLeft = wWidth > 1400 ? false : true;
		rWeixin.hover(function() {
			t = setTimeout(function() {
				var top = rWeixin.offset().top - erweiH + rbtnH,
					left = rWeixin.offset().left + (isLeft ? erweiW * -1 : rbtnW);
				erwei.css({
					'top': top,
					'left': left
				}).addClass('show');
			}, 300);
		}, function() {
			clearTimeout(t);
			erwei.removeClass('show');
		});
	}
};

// 微信客户端复层绑定
tiyuanFed.weixinFun = function() {
	var t = null,
		weixinBtn = $(".weixinBtn"),
		erwei = $(".erwei"),
		top = weixinBtn.offset().top - erwei.outerHeight(true) + weixinBtn.outerHeight(),
		left = weixinBtn.offset().left + weixinBtn.outerWidth();
	erwei.css({
		'top': top,
		'left': left
	});
	weixinBtn.length && weixinBtn.hover(function() {
		t = setTimeout(function() {
			erwei.addClass('show');
		}, 300);
	}, function() {
		clearTimeout(t);
		erwei.removeClass('show');
	});

};

// 菜单切换事件
tiyuanFed.menuFun = function() {
	$(".nav .tag").mouseover(function(e) {
		var i = $(this).index();
		$(this).addClass('on').siblings().removeClass('on');
		$(".nav-down").children('ul').eq(i).addClass('show').siblings('ul').removeClass('show');
		tiyuanFed.stopBubble(e);
	});
	$(".tab-con").mouseover(function(e) {
		var i = $(this).index();
		$(this).addClass('show').siblings().removeClass('show');
		$(".nav").children(".tag").eq(i).addClass('on').siblings(".tag").removeClass('on');
		tiyuanFed.stopBubble(e);
	});
	$('body').mouseover(function(e) {
		$(".nav .tag").removeClass('on');
		$(".nav-down ul").removeClass('show');
	});
};

//停止事件冒泡
tiyuanFed.stopBubble = function(e) {
	//如果提供了事件对象，则这是一个非IE浏览器
	if (e && e.stopPropagation) {
		e.stopPropagation();
	} else {
		//用IE的方式来取消事件冒泡
		window.event.cancelBubble = true;
	}
};

// tab 切换
tiyuanFed.tabFun = function() {
	var tab = $(".tab");
	if (!tab.length) {
		return;
	}
	tab.on('click', '.tag', function() {
		var _tab = $(this).parents('.tab'),
			index = $(this).index();
		$(this).addClass('on').siblings('.tag').removeClass('on');
		_tab.children('ul').eq(index).addClass('show').siblings('ul').removeClass('show');
	});
};

// 表单验证
tiyuanFed.formValidationFun = function(form) {
	$(form).validationEngine({
		promptPosition: 'topLeft',
		scroll: false,
		autoHidePrompt: true,
		autoHideDelay: 5000
	});

	$(form).on('click', '.btn-ok', function() {
		var isDisabled = $(this).porp('disabled');
		if (!isDisabled && $(form).validationEngine('validate')) {
			$(this).porp('disabled', true);
			return true;
		} else {
			return false;
		}
	});
};

// signUpFun
tiyuanFed.signUpFun = function() {
	var root = this,
		_signUp = $("#signUp");
	if (!_signUp.length || _signUp.hasClass('disabled')) {
		if ($("#signup-dialog").length) {
			$("#signup-dialog").remove();
		}
		return;
	}
	// 	初始化弹出框
	root.signUpDialog('signup-dialog', function(_this, _dialog) {
		signupAjax(_signUp);
	});

	// 绑定点击事件
	_signUp.click(function(event) {
		if (_signUp.hasClass('disabled')) return;
		var job = $("#job").val();
		if (job != "") {
			// ajax报名
			signupAjax(_signUp);
		} else {
			// 显示输入工号的弹出框
			$("#signup-dialog").autoDialog('open');
		}
	});

	function signupAjax(_signupBtn) {
		root.formSubmitFun($("#signup-form"), function(data) {
			root.tipsDialog('tips', 'ok', '报名成功！');
			_signupBtn.addClass('disabled').html('已报名');
		});
	}
};

// 获取表单提交数据
tiyuanFed.getFormJson = function(_form) {
	var json = {},
		key = "";
	$.each(_form.serializeArray(), function(i, m) {
		key = m.name;
		json[key] = m.value;
	});
	return JSON.stringify(json);
};

// myajax
tiyuanFed.formSubmitFun = function(_form, callback, eCallback) {
	if (!_form.length) return;
	var root = this;
	// 验证绑定
	_form.validationEngine({
		promptPosition: 'topLeft',
		scroll: false,
		autoHideDelay: 3000
	});

	// 验证
	if (!_form.validationEngine('validate')) return false;
	//提交验证
	$.ajax({
		url: _form.attr('action'),
		type: _form.attr('method'),
		data: root.getFormJson(_form),
		dataType: "json",
		timeout: 30000,
		headers: {
			"Accept": "application/json; charset=utf-8",
			"Content-Type": "application/json; charset=utf-8"
		},
		success: function(data) {
			if (data.code.toString() === '200') {
				if ($.isFunction(callback)) {
					callback(data);
				}
			} else {
				root.tipsDialog('tips', 'error', data.message);
				if ($.isFunction(eCallback)) {
					eCallback();
				}
			}
		},
		error: function(XMLHttpRequest, textStatus, errorThrown) {
			root.tipsDialog('tips', 'error', '服务器链接失败，请重试！');
			if ($.isFunction(eCallback)) {
				eCallback();
			}
		}
	});
};

// 报名弹出框
tiyuanFed.signUpDialog = function(id, okCallback, cancelCallback) {
	var _dialog = $("#" + id);
	if (!_dialog.length) return;

	// 初始化对话框
	_dialog.autoDialog({
		'title': '报名',
		'width': 450
	});
	// 成功事件
	_dialog.on('click', '#btn-ok', function() {
		if (okCallback && $.isFunction(okCallback)) {
			okCallback($(this), _dialog);
		}
	});
	// 关闭事件
	_dialog.on('click', '#btn-cancel', function() {
		_dialog.autoDialog('close');
		if (cancelCallback && $.isFunction(cancelCallback)) {
			cancelCallback($(this), _dialog);
		}
	});
}

// 留言发布AJAX
tiyuanFed.msgRelease = function() {
	var root = this;
	$("#msgReleaseForm").on('click', '.bnt-msgRelease', function(event) {
		var btn = $(this);
		if (btm.hasClass('disabled')) {
			return false;
		}
		btn.addClass("disabled").prop("disabled", true).text("提交中...");
		root.formSubmitFun($("#msgReleaseForm"), function(data) {
			root.tipsDialog('tips', 'ok', '留言发布成功');
			setTimeout(function() {
				window.location.reload(true);
				s
			}, 1000);
		}, function() {
			btn.removeClass("disabled").prop("disabled", false).text("立即发布");
		});
	});
}

// 初始加载
$(function() {
	//右侧悬浮
	tiyuanFed.rightFixedFun();
	// TAB事件切换绑定
	tiyuanFed.tabFun();
});